service: example-apps-comments-example

frameworkVersion: "3"

plugins:
  - serverless-plugin-typescript
provider:
  name: aws
  runtime: nodejs18.x
  stage: ${env:STAGE, 'dev'}
  region: ${env:AWS_REGION, 'us-east-1'}
  memorySize: 256
  timeout: 30
  deploymentBucket:
    name: ${self:provider.region}.${env:ACCOUNT_ID}.deploys.${self:service}
  versionFunctions: false
  stackName: "${self:provider.stage}-${self:service}"
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    ACCOUNT_ID: ${env:ACCOUNT_ID}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  stackTags:
    SERVICE: "${self:service}"
    REGION: "${self:provider.region}"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:${env:ACCOUNT_ID}:table/${self:provider.stage}-example-db-comments"
        - Effect: Allow
          Action:
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
            - sqs:SendMessage
          Resource: "*"
        - Effect: Allow
          Action:
            - kms:Decrypt
          Resource: "*"
custom:
  serverless-offline:
    ignoreJWTSignature: true
    httpPort: 3001
    websocketPort: 4001
    lambdaPort: 5001

functions:
  createSingleOwner:
    name: ${self:provider.stackName}-create-single
    handler: handlers/createSingleOwner.createSingleOwner
    description: API endpoint to create a single owner
    tags:
      service: ${self:service}
      stage: ${self:provider.stage}
    events:
      - httpApi:
          path: /owners
          method: post
  getMultipleOwners:
    name: ${self:provider.stackName}-get-multiple
    handler: handlers/getMultipleOwners.getMultipleOwners
    description: API endpoint to get multiple owners
    tags:
      service: ${self:service}
      stage: ${self:provider.stage}
    events:
      - httpApi:
          path: /owners
          method: get
  getSingleOwner:
    name: ${self:provider.stackName}-get-single
    handler: handlers/getSingleOwner.getSingleOwner
    description: API endpoint to get a single owner
    tags:
      service: ${self:service}
      stage: ${self:provider.stage}
    events:
      - httpApi:
          path: /owners/{ownerExternalIdOrSlug}
          method: get
  updateSingleOwner:
    name: ${self:provider.stackName}-update-single
    handler: handlers/updateSingleOwner.updateSingleOwner
    description: API endpoint to update a single owner
    tags:
      service: ${self:service}
      stage: ${self:provider.stage}
    events:
      - httpApi:
          path: /owners/{ownerExternalIdOrSlug}
          method: put
  uploadOwnerLogo:
    name: ${self:provider.stackName}-upload-logo
    handler: handlers/uploadOwnerLogo.uploadOwnerLogo
    description: API endpoint to upload a logo for an owner
    tags:
      service: ${self:service}
      stage: ${self:provider.stage}
    events:
      - httpApi:
          path: /owners/{ownerExternalIdOrSlug}/logo
          method: post
